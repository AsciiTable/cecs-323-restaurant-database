
1. A sous chef can only mentor one person at a time.

/*
Trigger keeps users from allowing a sous chef to mentor more than one person at a time.
Tells the user that a sous chef is already mentoring someone if they try to insert a mentorID that is already in another row
/*
delimiter $$
create trigger oneMentee before insert on Mentorship
	for each row
	BEGIN
		IF EXISTS (SELECT * FROM Mentorship WHERE Mentorship.mentorID = NEW.mentorID and Mentorship.enddate IS			        NULL) THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Sous chef is already mentoring someone!';
		END IF;
	END; $$
delimiter;



2. When assigning sections per shift, this trigger makes sure that the right employee is working that shift
/*
This trigger should be preventing the user from editing the sectionshift table. If it is edited, then it is inconsistent with 
all the other data.
It checks if that row exists and if it does, it rejects the user's update to the row./*
delimiter $$
create trigger rightWaiter before update of waiterID ON sectionshift
	for each row
	BEGIN
		IF EXISTS(SELECT * FROM SECTIONSHIFT 
			  INNER JOIN workschedule 
		          ON sectionshift.waiterid = workschedule.EID AND sectionshift.workdate = workschedule.workdate) THEN
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You cannot update the rows in this table!';
		END IF;
	END; $$
delimiter;

		
--TRIGGER TESTS 

--FOR ONEMENTEE
insert into Mentorship(recipename, mentorID, menteeID, startdate)
values
(Crab Rangoon, 39,41,'2019-11-01');

--THIS ONE SHOULD GO THROUGH AND BE FINE
UPDATE Mentorship
SET enddate = '2019-11-02'
WHERE mentorID = 39;

insert into Mentorship(recipeName, mentorID, menteeID, startDate,)
values
('Crab Rangoon', 39, 41, '2019-12-01');


--FOR RIGHTWAITER
UPDATE sectionshift
SET waiterid = 24
WHERE waiterid = 23;
